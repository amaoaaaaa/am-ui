const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/TableBaseUse.E7Urwkr4.js","assets/chunks/index.Bz854LB9.js","assets/chunks/framework.CLsYUbul.js","assets/chunks/index.jX7dO_k-.js","assets/chunks/index.BTyz0UJP.js","assets/chunks/TableVisibleRowsLimit.Hpb2YiO8.js","assets/chunks/TableAutoScroll.B2e9HkCk.js"])))=>i.map(i=>d[i]);
import{C as u,c as m,o as _,ae as s,G as a,j as d,w as o,k as l,af as n,a as e,ag as i}from"./chunks/framework.CLsYUbul.js";const x=JSON.parse('{"title":"Table 表格","description":"","frontmatter":{},"headers":[],"relativePath":"table.md","filePath":"table.md"}'),T={name:"table.md"},P=Object.assign(T,{setup(p){const h=n(()=>i(()=>import("./chunks/TableBaseUse.E7Urwkr4.js"),__vite__mapDeps([0,1,2,3,4]))),b=n(()=>i(()=>import("./chunks/TableVisibleRowsLimit.Hpb2YiO8.js"),__vite__mapDeps([5,1,2,3,4]))),c=n(()=>i(()=>import("./chunks/TableAutoScroll.B2e9HkCk.js"),__vite__mapDeps([6,1,2,3,4])));return(f,t)=>{const r=u("ClientOnly");return _(),m("div",null,[t[0]||(t[0]=s('<h1 id="table-表格" tabindex="-1">Table 表格 <a class="header-anchor" href="#table-表格" aria-label="Permalink to &quot;Table 表格&quot;">​</a></h1><p>带自动滚动的表格</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3><p>只需要传 <code>cols</code> 和 <code>data</code> 属性。</p><p>列配置里面开启 <code>truncate</code> 属性，即可使内容溢出省略（如第1行的地址）。</p>',6)),a(r,null,{default:o(()=>[a(l(h))]),_:1}),t[1]||(t[1]=d("h3",{id:"限制显示行数",tabindex:"-1"},[e("限制显示行数 "),d("a",{class:"header-anchor",href:"#限制显示行数","aria-label":'Permalink to "限制显示行数"'},"​")],-1)),t[2]||(t[2]=d("p",null,[e("通过 "),d("code",null,"visible-rows"),e(" 属性控制显示行数")],-1)),a(r,null,{default:o(()=>[a(l(b))]),_:1}),t[3]||(t[3]=d("h3",{id:"自动滚动",tabindex:"-1"},[e("自动滚动 "),d("a",{class:"header-anchor",href:"#自动滚动","aria-label":'Permalink to "自动滚动"'},"​")],-1)),t[4]||(t[4]=d("p",null,[e("通过 "),d("code",null,"visible-rows"),e(" 限制行数，并设置 "),d("code",null,"auto-scroll"),e(" 为 true")],-1)),a(r,null,{default:o(()=>[a(l(c))]),_:1}),t[5]||(t[5]=s('<h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>cols</td><td><a href="#tablecolumn"><code>TableColumn&lt;T&gt;[]</code></a></td><td>—</td><td>列配置</td></tr><tr><td>data</td><td><code>T[]</code></td><td>—</td><td>表格数据</td></tr><tr><td>size</td><td>&#39;small&#39; | &#39;default&#39; | &#39;large&#39;</td><td>—</td><td>表格尺寸</td></tr><tr><td>showIndex</td><td>boolean</td><td>true</td><td>是否使用序号列</td></tr><tr><td>rowClass</td><td>string | string[] | ((row: T) =&gt; string | string[])</td><td>—</td><td>表格行的 class</td></tr><tr><td>indexFormatter</td><td>(index: number, row: T) =&gt; any</td><td>—</td><td>序号格式化方法</td></tr><tr><td>autoScroll</td><td>boolean</td><td>false</td><td>是否开启自动滚动</td></tr><tr><td>limitScrollNum</td><td>number</td><td>—</td><td>开启自动滚动时，至少有多少行才开始滚动</td></tr><tr><td>visibleRows</td><td>number | string</td><td>—</td><td>固定显示行数，即使数据不足，也保持高度</td></tr><tr><td>pagination</td><td><code>{ pageSize: number; curPage: number }</code></td><td>—</td><td>分页数据，传入该值用于显示真实的 rowIndex</td></tr><tr><td>indexColStyle</td><td><code>HTMLAttributes[&#39;style&#39;]</code></td><td>—</td><td>索引列样式</td></tr></tbody></table><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件名称</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>rowClick</td><td><code>{ row: T; rowIndex: number }</code></td><td>行点击事件</td></tr></tbody></table><h2 id="css-变量" tabindex="-1">CSS 变量 <a class="header-anchor" href="#css-变量" aria-label="Permalink to &quot;CSS 变量&quot;">​</a></h2><table tabindex="0"><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>--head-height</td><td>表头高度</td></tr><tr><td>--head-font-size</td><td>表头字体大小</td></tr><tr><td>--body-font-size</td><td>表格主体字体大小</td></tr><tr><td>--row-min-height</td><td>表格行最小高度</td></tr><tr><td>--row-background-image</td><td>行背景图片</td></tr><tr><td>--index-cell-width</td><td>索引列宽度</td></tr><tr><td>--row-cell-padding</td><td>单元格内边距</td></tr></tbody></table><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><h3 id="tablecolumn" tabindex="-1">TableColumn <a class="header-anchor" href="#tablecolumn" aria-label="Permalink to &quot;TableColumn&quot;">​</a></h3><p><code>TableColumn&lt;T&gt;</code> 用于定义表格列的配置，其中 <code>T</code> 为表格每行数据的类型。</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>label</td><td>string</td><td>—</td><td>列名</td></tr><tr><td>prop</td><td>keyof T</td><td>—</td><td>绑定字段，对应行数据 <code>T</code> 的属性</td></tr><tr><td>style</td><td><code>HTMLAttributes[&#39;style&#39;]</code></td><td>—</td><td>单元格自定义样式</td></tr><tr><td>cellClass</td><td>string</td><td>—</td><td>单元格 class</td></tr><tr><td>truncate</td><td>boolean</td><td>false</td><td>是否开启文字溢出省略</td></tr><tr><td>align</td><td>&#39;left&#39; | &#39;center&#39; | &#39;right&#39;</td><td>&#39;center&#39;</td><td>内容对齐方式</td></tr><tr><td>width</td><td>number | string</td><td>—</td><td>列宽</td></tr><tr><td>formatter</td><td>(val: T[K], row: T) =&gt; string | number | undefined</td><td>—</td><td>自定义格式化函数，val 为单元格值，row 为整行数据</td></tr></tbody></table>',10))])}}});export{x as __pageData,P as default};
